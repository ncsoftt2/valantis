{"version":3,"file":"static/js/24.30e942d3.chunk.js","mappings":"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","sources":["common/hooks/useAppDispatch.ts","common/hooks/useAppSelector.ts","webpack://valantis/./src/page/ProductPage/ProductPage.module.css?269e","page/ProductPage/SelectBrands.tsx","page/ProductPage/ProductPage.tsx","testFunction.ts"],"sourcesContent":["import { useDispatch } from \"react-redux\";\r\nimport { AppDispatch } from \"src/store\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()","import {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport { AppState } from \"src/store\";\r\n\r\nexport const useAppSelector:TypedUseSelectorHook<AppState> = useSelector","// extracted by mini-css-extract-plugin\nexport default {\"products_list\":\"ProductPage_products_list__K5pHZ\",\"products\":\"ProductPage_products__mNxt3\",\"product\":\"ProductPage_product__dxgKn\",\"btns_wrapper\":\"ProductPage_btns_wrapper__S1Gr4\",\"btn\":\"ProductPage_btn__fVT7Q\",\"product_title\":\"ProductPage_product_title__lUT1V\",\"product_brand\":\"ProductPage_product_brand__ap8VK\",\"product_price_item\":\"ProductPage_product_price_item__XIGPe\",\"product_id\":\"ProductPage_product_id__KbvKQ\",\"SliderRoot\":\"ProductPage_SliderRoot__IND4m\",\"SliderTrack\":\"ProductPage_SliderTrack__-SL2M\",\"SliderRange\":\"ProductPage_SliderRange__NHi-9\",\"SliderThumb\":\"ProductPage_SliderThumb__7xohQ\"};","import {useAppSelector} from \"src/common/hooks/useAppSelector\";\r\nimport {ChangeEvent, memo, useEffect, useState} from \"react\";\r\nimport {useAppDispatch} from \"src/common/hooks/useAppDispatch\";\r\nimport {productThunk} from \"src/features/products/slice/slice\";\r\nimport {useSearchParams} from \"react-router-dom\";\r\n\r\nexport const SelectBrands = memo(() => {\r\n    const [searchParams,setSearchParams] = useSearchParams({})\r\n    const brands = useAppSelector(state => state.products.brands)\r\n    const dispatch = useAppDispatch()\r\n    const [brand, setBrand] = useState(brands[0])\r\n\r\n    const handleChange = (e:ChangeEvent<HTMLSelectElement>) => {\r\n        searchParams.delete('offset')\r\n        searchParams.delete('product')\r\n        searchParams.delete('price')\r\n        searchParams.set('brand', e.currentTarget.value)\r\n        setSearchParams(searchParams)\r\n        const payload = {action:'filter',params: {brand: e.currentTarget.value}}\r\n        dispatch(productThunk.fetchIdsProduct(payload))\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(productThunk.fetchProductsBrand());\r\n    }, [])\r\n\r\n    console.log(brand)\r\n\r\n    return (\r\n        <div>\r\n            <select onChange={handleChange}>\r\n                <option value={brand} disabled >Выбрать бренд</option>\r\n                {\r\n                    brands.map(b => (\r\n                        <>\r\n\r\n                            <option key={b}>{b}</option>\r\n                        </>\r\n\r\n                    ))\r\n                }\r\n            </select>\r\n\r\n        </div>\r\n    )\r\n})","import {useAppDispatch} from \"src/common/hooks/useAppDispatch\";\r\nimport {useAppSelector} from \"src/common/hooks/useAppSelector\";\r\nimport {useSearchParams} from \"react-router-dom\";\r\nimport {ChangeEvent, useEffect, useState} from \"react\";\r\nimport {productThunk} from \"src/features/products/slice/slice\";\r\nimport s from \"./ProductPage.module.css\";\r\nimport {testFunction} from \"src/testFunction\";\r\nimport {SelectBrands} from \"src/page/ProductPage/SelectBrands\";\r\n\r\n\r\n\r\n// V1\r\n// const ProductPage = () => {\r\n//     const dispatch = useAppDispatch()\r\n//     const productIds = useAppSelector(state => state.products.ids)\r\n//\r\n//     const [searchParams, setSearchParams] = useSearchParams({})\r\n//     const [param, setParam] = useState('')\r\n//\r\n//     const offset = Number(searchParams.get('offset')) || 0\r\n//     const limit = Number(searchParams.get('limit')) || 50\r\n//     const nameProduct = searchParams.get('product') === 'product' ? 'product' : String(searchParams.get('price'))\r\n//     const clearFilter = () => {\r\n//         setSearchParams({})\r\n//         dispatch(productThunk.fetchIdsProduct({limit, offset,action:'get_ids'}))\r\n//     }\r\n//\r\n//     const handleChange = (e:ChangeEvent<HTMLInputElement>) => {\r\n//         const target = e.currentTarget.value\r\n//         setParam(target)\r\n//     }\r\n//\r\n//     const handleChangeNext = (newOffset: number) => {\r\n//         searchParams.set('offset', newOffset.toString())\r\n//         setSearchParams(searchParams)\r\n//     }\r\n//     const handleChangePrev = (newOffset: number) => {\r\n//         searchParams.set('offset', newOffset.toString())\r\n//         setSearchParams(searchParams)\r\n//     }\r\n//\r\n//     const handleChangeRange = (newValue: number) => {\r\n//         searchParams.set('action', 'filter')\r\n//         searchParams.set('price', newValue.toString())\r\n//         searchParams.delete('offset')\r\n//         searchParams.delete('product')\r\n//         setSearchParams(searchParams)\r\n//         dispatch(productThunk.fetchIdsProduct({limit, offset, action:'filter',param:newValue}))\r\n//     }\r\n//     const handleClick = () => {\r\n//         if(param.trim().length !== 0) {\r\n//             searchParams.set('action', 'filter')\r\n//             searchParams.set('product', param.trim())\r\n//             searchParams.delete('offset')\r\n//             searchParams.delete('price')\r\n//             setSearchParams(searchParams)\r\n//             dispatch(productThunk.fetchIdsProduct({limit, offset, action:'filter',param:param.trim()}))\r\n//         }\r\n//     }\r\n//     useEffect(() => {\r\n//         const action = searchParams.get('action') || 'get_ids'\r\n//         const param = searchParams.get('product') || Number(searchParams.get('price'))\r\n//         dispatch(productThunk.fetchIdsProduct({limit, offset,action,param}))\r\n//         dispatch(productThunk.fetchProductsBrand())\r\n//     }, [offset])\r\n//\r\n//\r\n//     const productsIdNextBtnLength = productIds && productIds.length === 50\r\n//     const productsIdPrevBtnLength = offset === 0 || productIds && productIds.length > 50\r\n//     return (\r\n//         <section className={s.products_list}>\r\n//             <input value={param} onChange={handleChange}/>\r\n//             <button onClick={handleClick}>поиск</button>\r\n//             <div style={{display:'flex',alignItems:'center'}}>\r\n//                 <input type={'range'} value={nameProduct} min={0} max={500000} onChange={(e) =>handleChangeRange(+e.currentTarget.value)}/>\r\n//                 <input type=\"number\" value={nameProduct} onChange={(e) =>handleChangeRange(+e.currentTarget.value)}/>\r\n//             </div>\r\n//             <button onClick={clearFilter}>сбросить</button>\r\n//             <div className={s.btns_wrapper}>\r\n//                 {!productsIdPrevBtnLength &&\r\n//                     <button className={s.btn} disabled={offset === 0} onClick={() => handleChangePrev(offset - 50)}>&lt;</button>\r\n//                 }\r\n//                 {productsIdNextBtnLength &&\r\n//                     <button className={s.btn} onClick={() => handleChangeNext(offset + 50)}>&gt;</button>\r\n//                 }\r\n//             </div>\r\n//             <div className={s.products}>\r\n//                 {productIds && productIds.length > 0 && <Products />}\r\n//             </div>\r\n//         </section>\r\n//     )\r\n// }\r\n//\r\n// export default ProductPage\r\n\r\n\r\n\r\n// V2\r\n// const ProductPage = () => {\r\n//     const dispatch = useAppDispatch()\r\n//     const productIds = useAppSelector(state => state.products.ids)\r\n//\r\n//     const [searchParams, setSearchParams] = useSearchParams({})\r\n//     const [param, setParam] = useState('')\r\n//\r\n//     const offset = Number(searchParams.get('offset')) || 0\r\n//     const limit = Number(searchParams.get('limit')) || 50\r\n//     // const nameProduct = searchParams.get('product') === 'product' ? 'product' : String(searchParams.get('price'))\r\n//     const nameProduct = searchParams.get('product') ||searchParams.get('brand') || String(searchParams.get('price'))\r\n//     const clearFilter = () => {\r\n//         setSearchParams({})\r\n//         const payload = {action:'get_ids',params: {limit, offset}}\r\n//         dispatch(productThunk.fetchIdsProduct(payload))\r\n//     }\r\n//\r\n//     const handleChange = (e:ChangeEvent<HTMLInputElement>) => {\r\n//         const target = e.currentTarget.value\r\n//         setParam(target)\r\n//     }\r\n//\r\n//     const handleChangeNext = (newOffset: number) => {\r\n//         searchParams.set('offset', newOffset.toString())\r\n//         setSearchParams(searchParams)\r\n//     }\r\n//     const handleChangePrev = (newOffset: number) => {\r\n//         searchParams.set('offset', newOffset.toString())\r\n//         setSearchParams(searchParams)\r\n//     }\r\n//\r\n//     const handleChangeRange = (newValue: number) => {\r\n//         searchParams.set('action', 'filter')\r\n//         searchParams.set('price', newValue.toString())\r\n//         searchParams.delete('offset')\r\n//         searchParams.delete('product')\r\n//         setSearchParams(searchParams)\r\n//         const payload = {action:'filter',params: {price:newValue,limit, offset}}\r\n//         dispatch(productThunk.fetchIdsProduct(payload))\r\n//     }\r\n//     const handleClick = () => {\r\n//         if(param.trim().length !== 0) {\r\n//             searchParams.set('action', 'filter')\r\n//             searchParams.set('product', param.trim())\r\n//             searchParams.delete('offset')\r\n//             searchParams.delete('price')\r\n//             setSearchParams(searchParams)\r\n//             const payload = {\r\n//                 action:'filter',\r\n//                 params: {\r\n//                     product:param.trim(),\r\n//                     limit,\r\n//                     offset\r\n//                 }\r\n//             }\r\n//             dispatch(productThunk.fetchIdsProduct(payload))\r\n//         }\r\n//     }\r\n//     const {param2,action,initialKey} = testFunction()\r\n//     useEffect(() => {\r\n//\r\n//\r\n//         const payload = {\r\n//             action,\r\n//             params: {\r\n//                 [initialKey]: param2,\r\n//                 offset,\r\n//                 limit\r\n//             }\r\n//         };\r\n//         dispatch(productThunk.fetchIdsProduct(payload));\r\n//         dispatch(productThunk.fetchProductsBrand());\r\n//     }, [offset])\r\n//\r\n//     const productsIdNextBtnLength = productIds && productIds.length === 50\r\n//     const productsIdPrevBtnLength = offset === 0 || productIds && productIds.length > 50\r\n//\r\n//\r\n//     return (\r\n//         <section className={s.products_list}>\r\n//             <input value={param} onChange={handleChange}/>\r\n//             <button onClick={handleClick}>поиск</button>\r\n//             <div style={{display:'flex',alignItems:'center'}}>\r\n//                 <input type={'range'} value={nameProduct} min={0} max={500000} onChange={(e) =>handleChangeRange(+e.currentTarget.value)}/>\r\n//                 <input type=\"number\" value={nameProduct} onChange={(e) =>handleChangeRange(+e.currentTarget.value)}/>\r\n//             </div>\r\n//             <button onClick={clearFilter}>сбросить</button>\r\n//             <div className={s.btns_wrapper}>\r\n//                 {!productsIdPrevBtnLength &&\r\n//                     <button className={s.btn} disabled={offset === 0} onClick={() => handleChangePrev(offset - 50)}>&lt;</button>\r\n//                 }\r\n//                 {productsIdNextBtnLength &&\r\n//                     <button className={s.btn} onClick={() => handleChangeNext(offset + 50)}>&gt;</button>\r\n//                 }\r\n//             </div>\r\n//             <div className={s.products}>\r\n//                 {productIds && productIds.length > 0 && <Products />}\r\n//             </div>\r\n//         </section>\r\n//     )\r\n// }\r\n//\r\n// export default ProductPage\r\n\r\n\r\n// V3\r\nconst ProductPage = () => {\r\n    const dispatch = useAppDispatch()\r\n    const productIds = useAppSelector(state => state.products.ids)\r\n\r\n\r\n    const [searchParams, setSearchParams] = useSearchParams({})\r\n    const offset = Number(searchParams.get('offset')) || 0\r\n    const limit = Number(searchParams.get('limit')) || 50\r\n    const price = searchParams.get('price') === null ? undefined : Number(searchParams.get('price'))\r\n\r\n    const [productName, setProductName] = useState('')\r\n\r\n\r\n    const handleChangeProductName = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const target = e.currentTarget.value\r\n        setProductName(target.trim())\r\n    }\r\n\r\n    const handleClickSearchProductByName = () => {\r\n        if (productName.trim().length !== 0) {\r\n            searchParams.delete('offset')\r\n            searchParams.delete('price')\r\n            searchParams.set('action', 'filter')\r\n            searchParams.set('product', productName.trim())\r\n            setSearchParams(searchParams)\r\n            const payload = {\r\n                action: 'filter',\r\n                params: {\r\n                    product: productName.trim(),\r\n                    limit,\r\n                    offset\r\n                }\r\n            }\r\n            dispatch(productThunk.fetchIdsProduct(payload))\r\n        }\r\n    }\r\n\r\n    const handleChangeFilterByPrice = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const target = Number(e.currentTarget.value)\r\n        searchParams.set('action', 'filter')\r\n        searchParams.set('price', target.toString())\r\n        searchParams.delete('offset')\r\n        searchParams.delete('product')\r\n        setSearchParams(searchParams)\r\n        const payload = {action:'filter',params: {price:target,limit, offset}}\r\n        dispatch(productThunk.fetchIdsProduct(payload))\r\n    }\r\n\r\n    const clearFilter = () => {\r\n        setSearchParams({})\r\n        const payload = {action:'get_ids',params: {limit, offset}}\r\n        dispatch(productThunk.fetchIdsProduct(payload))\r\n    }\r\n\r\n\r\n    const {action,param2,initialKey} = testFunction()\r\n\r\n    useEffect(() => {\r\n        const payload = {\r\n            action,\r\n            params: {\r\n                [initialKey]: param2,\r\n                offset,\r\n                limit\r\n            }\r\n        };\r\n        dispatch(productThunk.fetchIdsProduct(payload));\r\n    }, [offset])\r\n\r\n    return (\r\n        <section className={s.products_list}>\r\n            <div className={s.filterWrapper}>\r\n                <input value={productName} onChange={handleChangeProductName}/>\r\n                <button onClick={handleClickSearchProductByName}>поиск</button>\r\n            </div>\r\n            <div style={{display: 'flex', alignItems: 'center'}}>\r\n                <input type=\"number\" value={price} onChange={handleChangeFilterByPrice}/>\r\n            </div>\r\n            <button onClick={clearFilter}>сбросить</button>\r\n            <SelectBrands />\r\n            {/*<div className={s.btns_wrapper}>*/}\r\n            {/*    {!productsIdPrevBtnLength &&*/}\r\n            {/*        <button className={s.btn} disabled={offset === 0}*/}\r\n            {/*                onClick={() => handleChangePrev(offset - 50)}>&lt;</button>*/}\r\n            {/*    }*/}\r\n            {/*    {productsIdNextBtnLength &&*/}\r\n            {/*        <button className={s.btn} onClick={() => handleChangeNext(offset + 50)}>&gt;</button>*/}\r\n            {/*    }*/}\r\n            {/*</div>*/}\r\n            <div className={s.products}>\r\n                {productIds && productIds.length > 0 && <Products/>}\r\n            </div>\r\n        </section>\r\n    )\r\n\r\n}\r\n\r\nexport default ProductPage\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Products = () => {\r\n\r\n    const products = useAppSelector(state => state.products.products)\r\n    const productIds = useAppSelector(state => state.products.ids)\r\n    const dispatch = useAppDispatch()\r\n    useEffect(() => {\r\n        dispatch(productThunk.fetchProducts(productIds))\r\n    }, [productIds])\r\n\r\n    return (\r\n        <>\r\n            {products.map((p) => {\r\n                return (\r\n                    <div className={s.product} key={p.id}>\r\n                        <div className={s.product_title}>{p.product}</div>\r\n                        <div className={s.product_id}>{p.id}</div>\r\n                        <div className={s.product_brand}>бренд: {p.brand || 'неизвестно'}</div>\r\n                        <div className={s.product_price}>\r\n                            цена: <span className={s.product_price_item}>{p.price.toLocaleString('ru-RU')}</span>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })}\r\n        </>\r\n    )\r\n}","export const testFunction = () => {\r\n    const searchParams = new URLSearchParams(window.location.search);\r\n    const keys = searchParams.keys();\r\n\r\n    let initialKey = keys.next().value;\r\n    while (initialKey === 'action') {\r\n        initialKey = keys.next().value;\r\n    }\r\n    const action = searchParams.get('action') || 'get_ids';\r\n    const param2 = searchParams.get('product') || Number(searchParams.get('price')) || searchParams.get('brand') || '';\r\n    return {action,param2, initialKey}\r\n}"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","SelectBrands","memo","searchParams","setSearchParams","useSearchParams","brands","state","products","dispatch","brand","setBrand","useState","useEffect","productThunk","fetchProductsBrand","console","log","_jsx","children","_jsxs","onChange","e","delete","set","currentTarget","value","payload","action","params","fetchIdsProduct","disabled","map","b","_Fragment","ProductPage","productIds","ids","offset","Number","get","limit","price","undefined","productName","setProductName","param2","initialKey","testFunction","URLSearchParams","window","location","search","keys","next","className","s","products_list","filterWrapper","target","trim","onClick","handleClickSearchProductByName","length","product","style","display","alignItems","type","toString","clearFilter","Products","fetchProducts","p","product_title","product_id","id","product_brand","product_price","product_price_item","toLocaleString"],"sourceRoot":""}